{"ast":null,"code":"import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { map } from '../operators/map';\nimport { canReportError } from '../util/canReportError';\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nexport function bindNodeCallback(callbackFunc, resultSelector, scheduler) {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      return (...args) => bindNodeCallback(callbackFunc, scheduler)(...args).pipe(map(args => isArray(args) ? resultSelector(...args) : resultSelector(args)));\n    }\n  }\n\n  return function (...args) {\n    const params = {\n      subject: undefined,\n      args,\n      callbackFunc,\n      scheduler,\n      context: this\n    };\n    return new Observable(subscriber => {\n      const {\n        context\n      } = params;\n      let {\n        subject\n      } = params;\n\n      if (!scheduler) {\n        if (!subject) {\n          subject = params.subject = new AsyncSubject();\n\n          const handler = (...innerArgs) => {\n            const err = innerArgs.shift();\n\n            if (err) {\n              subject.error(err);\n              return;\n            }\n\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          };\n\n          try {\n            callbackFunc.apply(context, [...args, handler]);\n          } catch (err) {\n            if (canReportError(subject)) {\n              subject.error(err);\n            } else {\n              console.warn(err);\n            }\n          }\n        }\n\n        return subject.subscribe(subscriber);\n      } else {\n        return scheduler.schedule(dispatch, 0, {\n          params,\n          subscriber,\n          context\n        });\n      }\n    });\n  };\n}\n\nfunction dispatch(state) {\n  const {\n    params,\n    subscriber,\n    context\n  } = state;\n  const {\n    callbackFunc,\n    args,\n    scheduler\n  } = params;\n  let subject = params.subject;\n\n  if (!subject) {\n    subject = params.subject = new AsyncSubject();\n\n    const handler = (...innerArgs) => {\n      const err = innerArgs.shift();\n\n      if (err) {\n        this.add(scheduler.schedule(dispatchError, 0, {\n          err,\n          subject\n        }));\n      } else {\n        const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        this.add(scheduler.schedule(dispatchNext, 0, {\n          value,\n          subject\n        }));\n      }\n    };\n\n    try {\n      callbackFunc.apply(context, [...args, handler]);\n    } catch (err) {\n      this.add(scheduler.schedule(dispatchError, 0, {\n        err,\n        subject\n      }));\n    }\n  }\n\n  this.add(subject.subscribe(subscriber));\n}\n\nfunction dispatchNext(arg) {\n  const {\n    value,\n    subject\n  } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\nfunction dispatchError(arg) {\n  const {\n    err,\n    subject\n  } = arg;\n  subject.error(err);\n}","map":{"version":3,"names":["Observable","AsyncSubject","map","canReportError","isScheduler","isArray","bindNodeCallback","callbackFunc","resultSelector","scheduler","args","pipe","params","subject","undefined","context","subscriber","handler","innerArgs","err","shift","error","next","length","complete","apply","console","warn","subscribe","schedule","dispatch","state","add","dispatchError","value","dispatchNext","arg"],"sources":["c:/temp/module_federation_nx_mono_repo/node_modules/rxjs/_esm2015/internal/observable/bindNodeCallback.js"],"sourcesContent":["import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { map } from '../operators/map';\nimport { canReportError } from '../util/canReportError';\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nexport function bindNodeCallback(callbackFunc, resultSelector, scheduler) {\n    if (resultSelector) {\n        if (isScheduler(resultSelector)) {\n            scheduler = resultSelector;\n        }\n        else {\n            return (...args) => bindNodeCallback(callbackFunc, scheduler)(...args).pipe(map(args => isArray(args) ? resultSelector(...args) : resultSelector(args)));\n        }\n    }\n    return function (...args) {\n        const params = {\n            subject: undefined,\n            args,\n            callbackFunc,\n            scheduler,\n            context: this,\n        };\n        return new Observable(subscriber => {\n            const { context } = params;\n            let { subject } = params;\n            if (!scheduler) {\n                if (!subject) {\n                    subject = params.subject = new AsyncSubject();\n                    const handler = (...innerArgs) => {\n                        const err = innerArgs.shift();\n                        if (err) {\n                            subject.error(err);\n                            return;\n                        }\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    };\n                    try {\n                        callbackFunc.apply(context, [...args, handler]);\n                    }\n                    catch (err) {\n                        if (canReportError(subject)) {\n                            subject.error(err);\n                        }\n                        else {\n                            console.warn(err);\n                        }\n                    }\n                }\n                return subject.subscribe(subscriber);\n            }\n            else {\n                return scheduler.schedule(dispatch, 0, { params, subscriber, context });\n            }\n        });\n    };\n}\nfunction dispatch(state) {\n    const { params, subscriber, context } = state;\n    const { callbackFunc, args, scheduler } = params;\n    let subject = params.subject;\n    if (!subject) {\n        subject = params.subject = new AsyncSubject();\n        const handler = (...innerArgs) => {\n            const err = innerArgs.shift();\n            if (err) {\n                this.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n            }\n            else {\n                const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                this.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n            }\n        };\n        try {\n            callbackFunc.apply(context, [...args, handler]);\n        }\n        catch (err) {\n            this.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n        }\n    }\n    this.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(arg) {\n    const { value, subject } = arg;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    const { err, subject } = arg;\n    subject.error(err);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}